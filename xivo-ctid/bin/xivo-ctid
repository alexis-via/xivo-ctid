#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (C) 2012       Avencall
# Copyright (C) 2007-2010  Proformatique
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import sys
from xivo_cti.ctiserver import CTIServer
from xivo_cti import cti_config

from xivo_cti.context import context
from xivo_dao.agentfeaturesdao import AgentFeaturesDAO
from xivo_dao.extensionsdao import ExtensionsDAO
from xivo_dao.linefeaturesdao import LineFeaturesDAO
from xivo_dao.phonefunckeydao import PhoneFunckeyDAO
from xivo_dao.trunkfeaturesdao import TrunkFeaturesDAO
from xivo_cti.dao.innerdatadao import InnerdataDAO
from xivo_cti.dao.userfeaturesdao import UserFeaturesDAO
from xivo_cti.funckey.funckey_manager import FunckeyManager
from xivo_cti.services.agent_service_manager import AgentServiceManager
from xivo_cti.services.agent_executor import AgentExecutor
from xivo_cti.services.presence_service_manager import PresenceServiceManager
from xivo_cti.services.presence_service_executor import PresenceServiceExecutor
from xivo_cti.services.queue_entry_manager import QueueEntryManager
from xivo_cti.services.queue_service_manager import QueueServiceManager
from xivo_cti.services.queuemember_service_manager import QueueMemberServiceManager
from xivo_cti.services.queuemember_service_notifier import QueueMemberServiceNotifier
from xivo_cti.services.user_service_manager import UserServiceManager
from xivo_cti.services.user_service_notifier import UserServiceNotifier
from xivo_cti.statistics.queue_statistics_manager import QueueStatisticsManager
from xivo_cti.statistics.queue_statistics_producer import QueueStatisticsProducer
from xivo_cti.statistics.statistics_notifier import StatisticsNotifier


def main():
    _parse_args(sys.argv[1:])

    _register_context(context)

    ctid = context.build(CTIServer)
    ctid.setup()
    ctid.run()


def _register_context(context):
    context.register('agent_executor', AgentExecutor)
    context.register('agent_features_dao', AgentFeaturesDAO.new_from_uri, 'queue_stats')
    context.register('agent_service_manager', AgentServiceManager)
    context.register('extensions_dao', ExtensionsDAO.new_from_uri, 'queue_stats')
    context.register('funckey_manager', FunckeyManager)
    context.register('innerdata_dao', InnerdataDAO)
    context.register('line_features_dao', LineFeaturesDAO.new_from_uri, 'queue_stats')
    context.register('queue_entry_manager', QueueEntryManager)
    context.register('queue_service_manager', QueueServiceManager)
    context.register('queue_statistics_producer', QueueStatisticsProducer)
    context.register('phone_funckey_dao', PhoneFunckeyDAO.new_from_uri, 'queue_stats')
    context.register('presence_service_executor', PresenceServiceExecutor)
    context.register('presence_service_manager', PresenceServiceManager)
    context.register('queuemember_service_manager', QueueMemberServiceManager)
    context.register('queuemember_service_notifier', QueueMemberServiceNotifier)
    context.register('statistics_notifier', StatisticsNotifier)
    context.register('trunk_features_dao', TrunkFeaturesDAO.new_from_uri, 'queue_stats')
    context.register('user_service_manager', UserServiceManager)
    context.register('user_service_notifier', UserServiceNotifier)
    context.register('user_features_dao', UserFeaturesDAO.new_from_uri, 'queue_stats')
    context.register('queue_statistics_manager', QueueStatisticsManager)


def _parse_args(args):
    parser = _new_parser()
    parsed_args = parser.parse_args(args)
    _process_parsed_args(parsed_args)


def _new_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true')
    parser.add_argument('-c', '--config')
    parser.add_argument('-C', '--confoverride')
    parser.add_argument('-p', '--pidfile')
    parser.add_argument('-l', '--logfile')
    parser.add_argument('-i', '--ip')
    parser.add_argument('-P', '--portdelta', type=int)
    return parser


def _process_parsed_args(parsed_args):
    if parsed_args.debug:
        cti_config.DEBUG_MODE = parsed_args.debug
    if parsed_args.config:
        cti_config.XIVO_CONF_FILE = parsed_args.config
    if parsed_args.confoverride:
        cti_config.XIVO_CONF_OVER = parsed_args.confoverride
    if parsed_args.pidfile:
        cti_config.PIDFILE = parsed_args.pidfile
    if parsed_args.logfile:
        cti_config.LOGFILENAME = parsed_args.logfile
    if parsed_args.ip:
        cti_config.XIVOIP = parsed_args.ip
    if parsed_args.portdelta:
        cti_config.PORTDELTA = parsed_args.portdelta

    if cti_config.XIVOIP != 'localhost':
        cti_config.XIVO_CONF_FILE = 'https://%s/cti/json.php/restricted/configuration' % cti_config.XIVOIP


if __name__ == '__main__':
    main()
